#! /bin/bash
VERSION="1.0"

function showVersion {
    echo "watchface v${VERSION}"
}

function showHelp {
    showVersion
    cat << EOF
watchface [option] [command...]
Utility functions for AsteroidOS watchfaces.  By default, uses "Developer Mode"
over ssh, but can also use "ADB Mode" using ADB.

Available options:
-h or --help    prints this help screen and quits
-a or --adb     uses ADB command to communicate with watch
-b or --boot    reboot watch after deploying multiple watchfaces
-g or --gui     use the GTK+ gui
-p or --port    specifies a port to use for ssh and scp commands
-r or --remote  specifies the remote (watch)  name or address for ssh and scp commands
-q or --qemu    communicates with QEMU emulated watch (same as -r localhost -p 2222 )
-w or --wall WP sets the wallpaper for deploy or test to the named file

Available commands:
version         displays the version of this program and exits
deploy WF       pushes the named watchface to the watch and activates it
clone WF NEWWF  clones the named watchface WF to new watchface NEWWF
test WF         sets the active watchface to the named watchface

EOF
}

function doWatchCommand {
    local user="$1"
    local cmd=$2
    case ${user} in
        root)
            if [ "$ADB" = "true" ] ; then
                adb shell "${cmd}"
            else
                ssh -p "${WATCHPORT}" -t root@"${WATCHADDR}" ${cmd}
            fi
            ;;
        ceres)
            if [ "$ADB" = "true" ] ; then
                printf -v cmd %q "${cmd}"
                adb shell "su -l -c ${cmd} ceres"
            else
                ssh -p "${WATCHPORT}" -t ceres@"${WATCHADDR}" ${cmd}
            fi
            ;;
        *)
            echo "Error: unknown watch user ${user}"
            ;;
    esac
}

function setDconf {
    local dconfsetting="$1"
    local filename="$2"
    doWatchCommand "ceres" "dconf write ${dconfsetting} '\"file://${filename}\"'"
}

function pushFiles {
    local user="$1"
    local sourcedir="$2"
    local destdir="$3"
    if [ "$ADB" = "true" ] ; then
        adb push ${sourcedir} "${destdir}"
    else
        scp -P"${WATCHPORT}" -r ${sourcedir} "${user}@${WATCHADDR}:${destdir}"
    fi
}

function pushWatchface {
    pushFiles "root" "${1}"'/usr/share/*' "/usr/share/"
}

function pushWallpaper {
    local source="$1"
    local wallpaper
    wallpaper="$(basename "$1")"
    local destination="/usr/share/asteroid-launcher/wallpapers/full/${wallpaper}"
    pushFiles "root" "${source}" "${destination}"
    setDconf "/desktop/asteroid/background-filename" "${destination}"
}

function restartCeres {
    doWatchCommand "root" "systemctl restart user@1000"
}

function rebootWatch {
    doWatchCommand "ceres" "reboot"
}

function activateWatchface {
    setDconf "/desktop/asteroid/watchface" "/usr/share/asteroid-launcher/watchfaces/${1}.qml"
}

function watchfaceClone {
    local files
    mapfile -t files <<<"$(find . -path './'"$1"'/*' -type f | awk '{ dst=$0 ; gsub(/'"$1"'/,"mmmm",dst);  print $0 " " dst }')"
    for myfile in "${files[@]}" ; do
        IFS=" " read -r -a onefile <<< "${myfile}"
        #echo "Copying from ${onefile[0]} to ${onefile[1]}"
        destdir="${onefile[1]%/*}"
        extension="${onefile[1]##*.}"
        mkdir -p "${destdir}"
        cp "${onefile[0]}" "${onefile[1]}"
        if [ "${extension}" = "qml" ] ; then
            sed -i "s/$1/$2/g" "${onefile[1]}"
        fi
    done
}

function deployface {
    # trim trailing / if present
    local face="${1%/*}"
    local activate="$2"
    if [ -d "${face}/usr/share/asteroid-launcher/watchfaces/" ] ; then
        echo "Deploying ${face}"
        pushWatchface "${face}"
        if [ "${activate}" = "true" ] ; then
            activateWatchface "${face}"
            if [ -n "${WALLPAPER}" ] ; then
                pushWallpaper "${WALLPAPER}"
            fi
            restartCeres
        fi
    else
        echo "Error: ${face} does not appear to be a watchface"
    fi
}

function testface {
    # trim trailing / if present
    local face="${1%/*}"
    if [ -d "${face}/usr/share/asteroid-launcher/watchfaces/" ] ; then
        echo "Testing ${face}"
        if [ -n "${WALLPAPER}" ] ; then
            qmlscene "${face}" "${WALLPAPER}" loader.qml
        else
            qmlscene "${face}" "background.jpg" loader.qml
        fi
    else
        echo "Error: ${face} does not appear to be a watchface"
    fi
}

function cloneface {
    # trim trailing / if present
    local face="${1%/*}"
    if [ -d "${face}/usr/share/asteroid-launcher/watchfaces/" ] ; then
        local SOURCE="${face}"
        local DEST="$2"
        echo "Cloning ${face} into $2"
        if [ ! -d "${SOURCE}" ] ; then
            echo "Error:  ${SOURCE} does not exist, exiting program"
            exit
        fi
        if [ -e "${DEST}" ] ; then
            echo "Error:  ${DEST} already exists, exiting program"
            exit
        fi
        watchfaceClone "${SOURCE}" "${DEST}"
    else
        echo "Error: ${face} does not appear to be a watchface"
    fi
}

function doGUI {
    local watchface
    local action
    if ! action=$(zenity --title="Select action" --list --radiolist \
        --column="selected" --column="action" \
        TRUE deploy \
        FALSE clone \
        FALSE test); then
        exit
    fi
    case $action in 
        deploy)
            declare -a args=('--title="Choose watchfaces"' "--list" "--checklist" '--column="Selected"' '--column="Name"')
            for wf in "${WATCHFACES[@]}" ; do
                args+=(FALSE "${wf}")
            done
            if ! watchface=$(zenity "${args[@]}"); then
                exit
            fi
            ;;
        clone|test)
            if ! watchface=$(zenity --title="Choose a watchface" --list --column="Name" "${WATCHFACES[@]}"); then
                exit
            fi
            ;;
    esac
    # convert | chars to spaces
    watchface=${watchface//|/ }
    if zenity --question --title="Confirming" --text="${action} ${watchface}" ; then
        echo "OK!"
        if [ "${action}" = "clone" ] ; then
            if newface=$(zenity --entry --title="Cloning ${watchface}" \
                --text="Enter name of new watchface:" \
                --entry-text "newface")
            then "${action}"face "${watchface}" "${newface}"
            else echo "No name entered"
            fi
        elif [ "${action}" = "deploy" ] ; then
            local first=true
            for wf in ${watchface}; do
                "${action}"face "${wf}" "${first}"
                first=false
            done
            if [ "${REBOOT}" = "true" ] ; then
                rebootWatch
            fi
        else
            "${action}"face "${watchface}"
        fi
    else
        echo "Canceled"
    fi
}

function textmenu {
    local args
    local watchface
    local newface
    if ! action=$("${MENUPROGRAM}" --title "Select action" --clear --radiolist \
        "Select action" 0 0 3 \
        "deploy" "Deploy watchface to watch" ON \
        "clone" "Clone watchface to new name" OFF \
        "test" "Test watchface on computer" OFF \
        3>&1 1>&2 2>&3); then
        exit
    fi
    case $action in 
        deploy)
            declare -a args=("--title" "Watchfaces" "--clear" "--checklist" "Choose watchfaces:" 25 78 15 "--" )
            for wf in "${WATCHFACES[@]}" ; do
                args+=("${wf}" "" OFF)
            done
            if ! watchface=$("${MENUPROGRAM}" "${args[@]}" 3>&1 1>&2 2>&3); then
                exit
            fi
            ;;
        clone|test)
            declare -a args=("--title" "Watchfaces" "--clear" "--menu" "Choose a watchface:" 25 78 15 "--" )
            for wf in "${WATCHFACES[@]}" ; do
                args+=("${wf}" "")
            done
            if ! watchface=$("${MENUPROGRAM}" "${args[@]}" 3>&1 1>&2 2>&3); then
                exit
            fi
            ;;
    esac
    if ("${MENUPROGRAM}" --clear --title "Confirming" --yesno "${action} ${watchface}" 0 0); then
        echo "OK!"
        if [ "${action}" = "clone" ] ; then
            if newface=$("${MENUPROGRAM}" \
                --title "Cloning ${watchface}" --clear \
                --inputbox "Enter name of new watchface:" \
                8 50 "newface" \
                3>&1 1>&2 2>&3)
            then
                "${action}"face "${watchface}" "${newface}"
            else
                echo "No name entered"
            fi
        elif [ "${action}" = "deploy" ] ; then
            local first=true
            for wf in ${watchface}; do
                "${action}"face "${wf}" "${first}"
                first=false
            done
            if [ "${REBOOT}" = "true" ] ; then
                rebootWatch
            fi
        else
            "${action}"face "${wf}"
        fi
    else
        echo "Canceled"
    fi
}

# These are the defaults for SSH access
WATCHPORT=22
WATCHADDR=192.168.2.15
# These are the defaults for local QEMU target
QEMUPORT=2222
QEMUADDR=localhost
# Assume no ADB unless told otherwise
ADB=false
# Assume no GUI unless told otherwise
GUI=false
# we're not done until we say we are
DONE=false
# No wallpaper unless asked
WALLPAPER=""
# Assume Dialog unless unavailable
if hash dialog 2>/dev/null; then
    MENUPROGRAM=dialog
else
    MENUPROGRAM=whiptail
fi


while [[ $# -gt 0 ]] ; do
    case $1 in
        -a|--adb)
            ADB=true
            shift
            ;;
        -b|--boot)
            REBOOT=true
            shift
            ;;
        -g|--gui)
            GUI=true
            shift
            ;;
        -q|--qemu)
            WATCHPORT=${QEMUPORT}
            WATCHADDR=${QEMUADDR}
            shift
            ;;
        -p|--port)
            WATCHPORT="$2"
            shift
            shift
            ;;
        -r|--remote)
            WATCHADDR="$2"
            shift
            shift
            ;;
        -h|--help)
            showHelp
            exit 1
            ;;
        -w|--wall)
            WALLPAPER="$2"
            shift
            shift
            ;;
        clone)
            cloneface "$2" "$3"
            shift
            shift
            shift
            DONE=true
            ;;
        deploy)
            deployface "$2" true
            shift
            shift
            DONE=true
            ;;
        test)
            testface "$2"
            shift
            shift
            DONE=true
            ;;
        version)
            showVersion
            shift
            DONE=true
            ;;
        *)
            echo "Ignoring unknown option $1"
            shift
            ;;
    esac
done

mapfile -t WATCHFACES < <(find . -maxdepth 3 -type d -path "*/usr/share" -printf "%h\n" | sort | awk -F '/' '{print $2}' )
if [ "${DONE}" != "true" ] ; then
    if [ "${GUI}" = "true" ] ; then
        doGUI
    else
        textmenu
    fi
fi
